name: Tasty Recipes CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_test_analyze_package:
    name: Build, Test, Analyze, Package & Create Artifacts
    runs-on: ubuntu-latest

    env:
      GHCR_OWNER: ezrabimantara

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run Unit Tests
        run: npx vitest run --environment jsdom

      - name: Build Application
        run: npm run build


      - name: SonarQube Static Analysis
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=ezra-bimantara
            -Dsonar.projectKey=EzraBimantara_FP_PSO_Kel5
            -Dsonar.projectName="Tasty Recipes - Kelompok 5"
            -Dsonar.sources=src
            -Dsonar.host.url=https://sonarcloud.io
      

      - name: Upload Build Artifact for Firebase
        uses: actions/upload-artifact@v4
        with:
          name: firebase-production-files
          path: ./dist

      - name: Login to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.GHCR_OWNER }}/tastyrecipes:${{ github.sha }}
            ghcr.io/${{ env.GHCR_OWNER }}/tastyrecipes:latest

  provision_and_deploy:
    name: Provision Infrastructure & Deploy to Firebase Hosting
    needs: build_test_analyze_package
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate Terraform with Google Cloud
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

      - name: Terraform Init
        working-directory: ./terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="prefix=tastyrecipes"

      - name: Terraform Validate
        working-directory: ./terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json
        run: |
          terraform plan -out=tfplan \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="app_version=${{ github.sha }}"

      - name: Terraform Apply
        if: github.ref == 'refs/heads/deploy_1'
        working-directory: ./terraform
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json
        run: terraform apply -auto-approve tfplan

      - name: Install Dependencies
        run: npm ci

      - name: Create Environment File
        run: |
          echo "VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}" >> .env
          echo "VITE_FIREBASE_DATABASE_URL=${{ secrets.VITE_FIREBASE_DATABASE_URL }}" >> .env
          echo "VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}" >> .env
          echo "VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}" >> .env
          echo "VITE_FIREBASE_API_KEY_REGISTER=${{ secrets.VITE_FIREBASE_API_KEY }}" >> .env
          echo "VITE_FIREBASE_API_KEY_LOGIN=${{ secrets.VITE_FIREBASE_API_KEY }}" >> .env

      - name: Build Application
        run: npm run build

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase Hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: firebase deploy --only hosting --token $FIREBASE_TOKEN --project $GCP_PROJECT_ID

      - name: Verify Deployment
        run: |
          echo "Deployment completed successfully!"
          echo "Application URL: https://${{ secrets.GCP_PROJECT_ID }}.web.app"
